apiVersion: karpenter.sh/v1
kind: NodePool
metadata:
  name: default
spec:
  template:
    metadata:
      labels:
        provisioning-group: karpenter
        node-role: services
    spec:
      requirements:
        - key: "node.kubernetes.io/instance-type"
          operator: In
          values: ["m5.large", "m5.xlarge", "c5.large", "c5.xlarge", "r5.large"]
        - key: "topology.kubernetes.io/zone"
          operator: In
          values: ["${region}a", "${region}b", "${region}c"]
        - key: "kubernetes.io/arch"
          operator: In
          values: ["amd64"]
        - key: "karpenter.sh/capacity-type"
          operator: In
          values: ["on-demand", "spot"]
      nodeClassRef:
        apiVersion: karpenter.k8s.aws/v1
        kind: EC2NodeClass
        name: default
        group: karpenter.k8s.aws
  disruption:
    consolidationPolicy: WhenEmptyOrUnderutilized
    consolidateAfter: 30s # Consolidate after 30 seconds of underutilization
    expireAfter: 12h # Expire nodes after 12 hours
  limits:
    cpu: 100
    memory: 200Gi
---
apiVersion: karpenter.k8s.aws/v1
kind: EC2NodeClass
metadata:
  name: default
spec:
  amiFamily: AL2 # Amazon Linux 2 AMI Family
  role: "${node_role_name}" # Reference the Node IAM Role Name created by the module
  subnetSelectorTerms:
    - tags:
        karpenter.sh/discovery: ${cluster_name}
        Type: Private # Select only private subnets
  securityGroupSelectorTerms:
    - tags:
        karpenter.sh/discovery: ${cluster_name}
        kubernetes.io/cluster/${cluster_name}: owned # Select the cluster security group
  tags:
    karpenter.sh/discovery: ${cluster_name}
    created-by: karpenter
  blockDeviceMappings:
    - deviceName: /dev/xvda
      ebs:
        volumeSize: 50Gi
        volumeType: gp3
        iops: 3000
        encrypted: true 