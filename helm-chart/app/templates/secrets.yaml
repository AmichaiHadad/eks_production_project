# This template creates ExternalSecret resources to sync secrets from AWS Secrets Manager
# using the External Secrets Operator.

# Create ExternalSecret for Weather API Key
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: app-weather-api-external-secret
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "app.labels" . | nindent 4 }}
spec:
  refreshInterval: "1h"
  secretStoreRef:
    name: aws-secretsmanager
    kind: ClusterSecretStore
  target:
    name: app-secrets
    creationPolicy: Owner
    template:
      metadata:
        labels:
          app: {{ include "app.name" . }}
      data:
        weather-api-key: "{{ .api_key }}"
  # Find secrets matching these criteria
  dataFrom:
    # Use the secretsmanager provider's native find functionality
    - find:
        tags:
          status: active
        name:
          regexp: "^{{ .Values.secrets.weatherAPIPrefix }}.*$"
---
# Create ExternalSecret for MySQL App User connection details
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: app-mysql-connection-eso-sync
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "app.labels" . | nindent 4 }}
spec:
  refreshInterval: "1h"
  secretStoreRef:
    name: aws-secretsmanager
    kind: ClusterSecretStore
  target:
    name: mysql-app-creds
    creationPolicy: Owner
    template:
      metadata:
        labels:
          app: {{ include "app.name" . }}
          role: mysql-app-credentials
  # Find secrets matching these criteria  
  dataFrom:
    # Use the secretsmanager provider's native find functionality
    - find:
        tags:
          status: active
        name:
          regexp: "^{{ .Values.secrets.mysqlAppUserPrefix }}.*$" 